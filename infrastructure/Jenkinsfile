pipeline {
    agent any
    options {
        disableConcurrentBuilds()
    }
    environment {
        CONSUL_HTTP_TOKEN    = credentials('CONSUL_HTTP_TOKEN')
    }
    stages {
        stage('Build') {
            environment {
                VITE_API_URL = 'https://graph.zubr.app/api/rest'
            }
            steps {
                sh 'yarn'
                sh 'yarn run build --emptyOutDir'
                sh 'mv dist/nested/index.html dist/nested.html'
            }
        }
        stage('Deploy') {
            environment {
                def FRONTEND_HOST = sh(script: "consul kv get ci/api-ip", returnStdout: true).trim()
            }
            steps {
                ansiblePlaybook(
                      playbook: 'infrastructure/deploy.yml',
                      inventory: "$FRONTEND_HOST,",
                      credentialsId: "CURRENT_DEPLOY_KEY",
                      hostKeyChecking: false
                )
            }
        }
    }
    post {
        always {
            notifyBuild(currentBuild.result)
        }
    }
}

def notifyBuild(def buildStatus) {
    // set default of build status
    buildStatus =  buildStatus ?: 'SUCCESS'
    GIT_COMMIT_MSG = sh (
        script: "git log --format=format:%s -1 ${GIT_COMMIT}",
        returnStdout: true
    ).trim()
    def emojiMap = [ 'STARTED': '#F0FFFF', 'SUCCESS': 'âœ…', 'FAILURE': 'ðŸ›‘' ]
    telegramSend """
${emojiMap[buildStatus]} *${JOB_NAME}* - ${buildStatus}
${env.RUN_DISPLAY_URL}
${GIT_COMMIT_MSG}
"""
}

